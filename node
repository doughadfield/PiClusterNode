#!/bin/bash

# Access cluster nodes for serial I/O or power cycle

# This program is used with the Cluster controller board to control up to 8 Rpi cluster nodes
# Version V3 - for use with V3 board (also works with V2, but power monitor unavailable)
#
# Board V1 used 4051 analog switches to route serial I/O and power outs.
# Problems were: no latching power enables, so could only power cycle one node, momentarily
#		 Not fast enough to sustain serial at 115200baud reliably

# Board V2 used 74HC138/74HC251 for serial I/O, and 74HC259 for power enables
# fixed serial speed issue and delivered power enable persistance
# Problem: no power state monitoring for nodes (is the node on or off?)
# 
# Board V3 added a second 74HC251 for direct monitoring of power enable lines.
#

# A 74HC138 (for TX) and 74HC251 (for RX) (de)multiplexers for fanout of TX and RX UART signals
# from Pi1 to nodes 2-8 (pi2 has fixed ttyAMA2 - ttyAMA10 to pi1)
# One x 74HC259 addressable latch, driving the Enable lines of the DC/DC
# converters powering the Pi boards. CLK and DATA lines on GPIO 17 and 18
# GPIO pins 2, 3 and 4 are address lines 0, 1 and 2 for above signals
# Serial1 pins from pi1 via (de)mulitplexers, to serial0 of cluster nodes

# (Board V3) Addition of power monitor using a second 74HC251 connected to the power enable
# outputs from the 74HC259, so as to sample the current power status of nodes.
# Output of power monitor is GPIO 27 (was serial enable in previous board versions)

# GPIO 2,3,4 are address select pins for I/O multiplexers
# pin 2 = bit 0
# pin 3 = bit 1
# pin 4 = bit 2

# GPIO 18 is power pin -  active HIGH = POWEROFF!
# Power off signal is latched by GPIO 17 CLK pin pulsing low (active LOW)
# GPIO 17 is power latch Clk pin - high latches value, low enables Data to selected output
# GPIO 27 WAS serial enable, but now is INPUT from power monitor mpx.

serialport="/dev/ttyAMA0"	        # outgoing UART into demultiplexer board
baudrate=115200				# Baud rate set for node serial ports

# Setup function configures GPIO pins to drive multiplexers
# Initialises GPIO pins to node 0 (pi1) selected, with power ON and Clk DISABLED
setup () {	# Set up GPIO pins if not already done
	if [[ $(pinctrl get 17) != *op* ]]
	then
		pinctrl set 17 op dh		# set Power Clk pin to output and HIGH (disable)
		echo "Initialising GPIO pins"	# echo acts as time delay for enable pin settling
		pinctrl set 2,3,4,18 op dl	# set Address and PowerOn pins to output and LOW
			# default pins to 0, for address 000 (pi1) and power 0 (ON) enable OFF
		pinctrl set 27 ip pd		# GPIO27 is input (with pull-down)
		echo "GPIO pins initialised"
	fi
}

# Get selected node number from select pins and set global variable "selectednode"
nodenum() {
	selectednode=1						# count from 1 (1-8)
	if [[ $(pinctrl get 2) == *hi* ]]
	then
		selectednode=$((selectednode + 1))
	fi

	if [[ $(pinctrl get 3) == *hi* ]]
	then
		selectednode=$((selectednode + 2))
	fi

	if [[ $(pinctrl get 4) == *hi* ]]
	then
		selectednode=$((selectednode + 4))
	fi
}

# Print out current state of GPIO pins
nodegpio () {
	if [[ $(pinctrl get 17) == *op* ]]
	then
		echo "node select pins:"
		pinctrl get 2,3,4 | cut -d ' ' -f 2,7
		nodenum
		echo "Selected node =" $selectednode	# global variable retains selected node
		echo "Power Enable pins:"
		pinctrl get 17,18 | cut -d ' ' -f 1,6
		if [[ $(pinctrl get 17) == *hi* ]]
		then
			echo "Power CLK High (Disabled)"
		else
			echo "Power CLK Low (ENABLED!)"
		fi

		if [[ $(pinctrl get 18) == *hi* ]]
		then
			echo "Power Data High (POWEROFF!)"
		else
			echo "Power Data Low (PowerOn)"
		fi
		echo
	else
		echo "GPIO pins not yet initialised"
		echo -n "Initialise GPIO pins [y/N]? "
		read reply
		if [[ $reply == "Y" || $reply == "y" ]]
		then
			setup
			nodegpio
		else
			echo "GPIO pins not initialised"
		fi
	fi
}

# Print currently selected node and power states for all nodes
nodestatus () {
	nodenum
	currentnode=$selectednode		# save current selection for restore below
	echo
	for i in 1 2 3 4 5 6 7 8
	do
		nodeselect $i 
		echo -n "node $selectednode POWER is "
		if [[ $(pinctrl get 27) == *hi* ]]
		then
			echo "OFF!"
		else
			echo "ON"
		fi
	done
	nodeselect $currentnode			# restore previously selected node
	echo "Currently selected node =" $selectednode
	echo
}

# Set GPIO address pins of multiplexers to specified node
nodeselect () {
	pinctrl set 17 dh		# ensure power gate is DISABLED (high)
	pinctrl set 18 dl		# ensure power D pin is in ON state (low)
	case $1 in
	1)	pinctrl set 2,3,4 dl
		;;
	2)	pinctrl set 2 dh
		pinctrl set 3,4 dl
		;;
	3)	pinctrl set 2,4 dl
		pinctrl set 3 dh
		;;
	4)	pinctrl set 2,3 dh
		pinctrl set 4 dl
		;;
	5)	pinctrl set 2,3 dl
		pinctrl set 4 dh
		;;
	6)	pinctrl set 3 dl
		pinctrl set 2,4 dh
		;;
	7)	pinctrl set 2 dl
		pinctrl set 3,4 dh
		;;
	8)	pinctrl set 2,3,4 dh
		;;
	*)	echo "Unknown node: $1"
		usage
		exit
		;;
	esac
	nodenum			# update global node number with new selection
}

usage () {
	echo "Usage: $scriptname <command> [<node number>]"
	echo "Commands:
	gpio
	status
	select <n>
	connect <n>
	poweroff <n>
	poweron <n>
	powercycle <n>"

	echo "<n> = Node number: 1-8"
}

setpoweroff () {
	pinctrl set 17 dh			# ensure Clk disabled to start with
	pinctrl set 18 dh			# set power Data pin to POWER OFF
	pinctrl set 17 dl			# set power Clk pin to Enable
	pinctrl set 17 dh			# set power Clk pin to Latch
	pinctrl set 18 dl			# leave power Data pin in ON state
}
setpoweron () {
	pinctrl set 18 dl			# set power pin to POWER ON
	pinctrl set 17 dl			# set power Clk pin to Enable
	pinctrl set 17 dh			# set power Clk pin to Latch
}

checkarg () {	# Check argument
	if [[ $1 -lt 1 || $1 -gt 8 ]]
	then
		usage
		exit
	fi
}

scriptname=`basename $0`


case $1 in
"gpio")		# Print current state of GPIO pins
	nodegpio
	;;
"status")	# Print status of mux GPU pins
	setup	# Set up GPIO pins if not already done
	nodestatus
	;;
"select")	# Set GPIO pins to select specified node
	setup	# Set up GPIO pins if not already done
	nodeselect $2
	echo Selected node $2
	;;
"connect")	# connect to serial port
	setup	# Set up GPIO pins if not already done
	nodeselect $2
	minicom -D $serialport -b $baudrate
	;;
"powercycle")	# Power cycle node - poweroff is momentary, until RETURN pressed
	setup	# Set up GPIO pins if not already done
	nodeselect $2
	echo -n "Press Return to power cycle node $2 "
	read input
	echo "Powering off node $2"
	setpoweroff
	sleep 1
	echo -n "Node $2 powered OFF - Press Return to power on and connect to serial "
	read input
	setpoweron
	sleep 1
	minicom -D $serialport -b $baudrate
	;;
"poweroff")	# Power off node and exit (power state latched persistently)
	setup	# Set up GPIO pins if not already done
	nodeselect $2
	echo -n "Press Return to power OFF node $2 "
	read input
	echo "Powering off node $2"
	setpoweroff
	echo "Node $2 powered OFF"
	;;
"poweron")	# Power on specified node
	nodeselect $2
	echo -n "Press Return to power ON node $2 and connect to serial "
	read input
	setpoweron
	sleep 1
	minicom -D $serialport -b $baudrate
	;;

*)		# Default action - print usage
	usage
	;;
esac

